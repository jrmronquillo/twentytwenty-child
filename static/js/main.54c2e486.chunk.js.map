{"version":3,"sources":["logo.svg","Components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","className","href","icon","faArrowAltCircleLeft","faArrowAltCircleRight","id","this","props","focusedButton","Component","App","state","name","ctas","handleKeydown","bind","selectCall","event","keyCode","setState","console","log","url","window","location","document","addEventListener","faCog","faReact","faGit","faHtml5","faJs","faCss3","faPython","faUbuntu","React","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,gLCuB5BC,E,iLAhBX,OACE,6BACC,yBAAKC,UAAU,aAAY,uBAAGC,KAAK,YAAR,wBAC1B,yBAAKD,UAAU,oBACb,0BAAMA,UAAU,eAAc,kBAAC,IAAD,CAAiBA,UAAU,GAAGE,KAAMC,OAClE,0BAAMH,UAAU,eAAc,kBAAC,IAAD,CAAiBA,UAAU,GAAGE,KAAME,QAEpE,yBAAKJ,UAAU,kBACd,uBAAGC,KAAK,SAAQ,4BAAQI,GAAG,UAAUL,UAAwC,IAA7BM,KAAKC,MAAMC,cAAsB,sBAAwB,eAAzF,aAChB,uBAAGP,KAAK,KAAI,4BAAQI,GAAG,UAAUL,UAAwC,IAA7BM,KAAKC,MAAMC,cAAsB,sBAAuB,eAAxF,mB,GAZCC,a,OC4FPC,E,YAtFb,WAAYH,GAAO,IAAD,8BAChB,4CAAMA,KACDI,MAAQ,CACXC,KAAM,mBACNC,KAAM,CAAC,sBAAsB,SAC7BL,cAAe,GAGjB,EAAKM,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATF,E,2EAYJE,GAEZ,OAAOA,EAAMC,SACX,KAAK,GAEHZ,KAAKa,SAAS,CACZX,cAAe,IAEjB,MACF,KAAK,GAEHF,KAAKa,SAAS,CACZX,cAAe,IAEjB,MACF,KAAK,GAEHY,QAAQC,IAAI,mBACZf,KAAKU,aACL,MACF,QACEI,QAAQC,IAAI,wBAAwBJ,EAAMC,Y,mCAS9CE,QAAQC,IAAIf,KAAKK,MAAME,KAAKP,KAAKK,MAAMH,gBACvC,IAAIc,EAAMhB,KAAKK,MAAME,KAAKP,KAAKK,MAAMH,eACrCe,OAAOC,SAASvB,KAAKqB,I,0CAKrBG,SAASC,iBAAiB,UAAWpB,KAAKQ,iB,+BAM1C,OACA,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACG,8BAAOM,KAAKK,MAAMC,OAGpB,kBAAC,EAAD,CAASJ,cAAeF,KAAKK,MAAMH,gBACpC,6BACE,kBAAC,IAAD,CAAiBR,UAAU,WAAWE,KAAMyB,MAC5C,kBAAC,IAAD,CAAiB3B,UAAU,WAAWE,KAAM0B,MAC5C,kBAAC,IAAD,CAAiB5B,UAAU,WAAWE,KAAM2B,MAC5C,kBAAC,IAAD,CAAiB7B,UAAU,WAAWE,KAAM4B,MAC5C,kBAAC,IAAD,CAAiB9B,UAAU,WAAWE,KAAM6B,MAC5C,kBAAC,IAAD,CAAiB/B,UAAU,WAAWE,KAAM8B,MAC5C,kBAAC,IAAD,CAAiBhC,UAAU,WAAWE,KAAM+B,MAC5C,kBAAC,IAAD,CAAiBjC,UAAU,WAAWE,KAAMgC,MAE5C,kBAAC,IAAD,CAAiBlC,UAAU,WAAWE,KAAMC,a,GA1EpCgC,IAAM1B,WCGJ2B,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.54c2e486.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faArrowLeft, faArrowAltCircleLeft, faArrowAltCircleRight} from '@fortawesome/free-solid-svg-icons';\n\nclass Content extends Component {\n  render() {\n    // ...\n    return (\n      <div>\n      \t<div className=\"sub-title\"><a href=\"/contact\">Front End Developer</a></div>\n        <div className=\"arrows-container\">\n          <span className=\"arrows-item\"><FontAwesomeIcon className=\"\" icon={faArrowAltCircleLeft} /></span>\n          <span className=\"arrows-item\"><FontAwesomeIcon className=\"\" icon={faArrowAltCircleRight} /></span>\n        </div>\n        <div className=\"button-section\">\n        \t<a href=\"/blog\"><button id=\"button1\" className={this.props.focusedButton === 0 ? 'button-text-focused' : 'button-text' }>LinkedIn</button></a>\n        \t<a href=\"/\"><button id=\"button2\" className={this.props.focusedButton === 1 ? 'button-text-focused': 'button-text'}>Projects</button></a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Content from './Components/Content'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faReact, faGit, faHtml5, faJs, faCss3, faPython, faUbuntu } from '@fortawesome/free-brands-svg-icons'\nimport { faCog, faArrowLeft, faArrowAltCircleLeft} from '@fortawesome/free-solid-svg-icons'\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name: 'Jerome Ronquillo',\n      ctas: ['http://linkedin.com','/blog'],\n      focusedButton: 0,\n    };\n\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.selectCall = this.selectCall.bind(this);\n  }\n\n  handleKeydown(event){\n    // console.log(event);\n    switch(event.keyCode){\n      case 37:\n        // left arrow\n        this.setState({\n          focusedButton: 0,\n        });\n        break;\n      case 39:\n        // right arrow\n        this.setState({\n          focusedButton: 1,\n        });\n        break;\n      case 13:\n        // enter\n        console.log('enter submitted');\n        this.selectCall();\n        break;\n      default:\n        console.log('unsupported keydown: '+event.keyCode);\n    }\n\n\n\n\n  }\n\n  selectCall(){\n    console.log(this.state.ctas[this.state.focusedButton]);\n    var url = this.state.ctas[this.state.focusedButton] \n    window.location.href=url;\n    \n  }\n\n  componentDidMount(){\n    document.addEventListener('keydown', this.handleKeydown)\n  }\n\n\n\n  render(){\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n           <code>{this.state.name}</code> \n        </p>\n\n         <Content focusedButton={this.state.focusedButton}  />\n        <div>\n          <FontAwesomeIcon className=\"App-logo\" icon={faCog} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faReact} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faGit} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faHtml5} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faJs} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faCss3} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faPython} />\n          <FontAwesomeIcon className=\"App-logo\" icon={faUbuntu} />\n          \n          <FontAwesomeIcon className=\"App-logo\" icon={faArrowAltCircleLeft} />\n        </div>\n        \n        \n       \n\n      </header>\n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}